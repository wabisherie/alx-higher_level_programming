This is a doctest based regression suite for 2-matrix_divided.txt
Each '>>>' line is run as if in a python shell, and counts as a test.
The next line, if not '>>>' is the expected output of the previous line.
If anything doesn't match exactly (including trailing spaces), the test fails.

>>> matrix_divided = __import__('2-matrix_divided').matrix_divided
>>> matrix = [[1, 2, 3], [4, 5, 6]]
>>> matrix_divided(matrix, 3)
[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]
>>> matrix_divided(matrix, 2.8)
[[0.36, 0.71, 1.07], [1.43, 1.79, 2.14]]
>>> matrix_divided(matrix, "Hello")
Traceback (most recent call last):
  ...
TypeError: div must be a number
>>> matrix_divided(matrix, 0)
Traceback (most recent call last):
  ...
ZeroDivisionError: division by zero
>>> matrix_divided(matrix, False)
Traceback (most recent call last):
  ...
ZeroDivisionError: division by zero
>>> matrix_divided(matrix, True)
[[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]
>>> matrix = [[1, 2, 3],[4, 6]]
>>> matrix_divided(matrix, 2)
Traceback (most recent call last):
  ...
TypeError: Each row of the matrix must have the same size
>>> matrix = [[1, 2], [3, 4, 6]]
>>> matrix_divided(matrix, 3)
Traceback (most recent call last):
  ...
TypeError: Each row of the matrix must have the same size
>>> matrix_divided(matrix, 3.5)
Traceback (most recent call last):
  ...
TypeError: Each row of the matrix must have the same size
>>> matrix = [[1, 'miss', 2], [5, 7, 8]]
>>> matrix_divided(matrix, 5)
Traceback (most recent call last):
  ...
TypeError: matrix must be a matrix (list of lists) of integers/floats
>>> matrix = [[1, 4, 2], ['hello', 8]]
>>> matrix_divided(matrix, 5)
Traceback (most recent call last):
  ...
TypeError: matrix must be a matrix (list of lists) of integers/floats
>>> matrix_divided(None, 2)
Traceback (most recent call last):
  ...
TypeError: 'NoneType' object is not iterable
